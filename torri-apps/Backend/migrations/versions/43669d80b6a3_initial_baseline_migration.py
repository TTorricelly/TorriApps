"""initial baseline migration

Revision ID: 43669d80b6a3
Revises: 
Create Date: 2025-07-03 20:03:36.845694

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '43669d80b6a3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('appointment_groups', 'status',
               existing_type=postgresql.ENUM('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'WALK_IN', 'PARTIALLY_COMPLETED', 'READY_TO_PAY', 'IN_SERVICE', 'CONFIRMED', 'ARRIVED', name='appointment_groups_status_enum'),
               type_=sa.Enum('SCHEDULED', 'CONFIRMED', 'WALK_IN', 'ARRIVED', 'IN_SERVICE', 'READY_TO_PAY', 'COMPLETED', 'CANCELLED', 'PARTIALLY_COMPLETED', name='appointmentgroupstatus'),
               existing_nullable=False)
    op.drop_index('appointment_groups_client_id_idx', table_name='appointment_groups')
    op.drop_index('appointment_groups_start_time_idx', table_name='appointment_groups')
    op.drop_index('appointment_groups_status_idx', table_name='appointment_groups')
    op.create_index(op.f('ix_appointment_groups_client_id'), 'appointment_groups', ['client_id'], unique=False)
    op.create_index(op.f('ix_appointment_groups_start_time'), 'appointment_groups', ['start_time'], unique=False)
    op.create_index(op.f('ix_appointment_groups_status'), 'appointment_groups', ['status'], unique=False)
    op.create_foreign_key(None, 'appointment_groups', 'users', ['client_id'], ['id'])
    op.alter_column('appointments', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('appointments', 'status',
               existing_type=postgresql.ENUM('SCHEDULED', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'WALK_IN', 'READY_TO_PAY', 'IN_SERVICE', 'ARRIVED', name='appointments_status_enum'),
               server_default=None,
               type_=sa.Enum('SCHEDULED', 'CONFIRMED', 'WALK_IN', 'ARRIVED', 'IN_SERVICE', 'READY_TO_PAY', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='appointmentstatus'),
               existing_nullable=True)
    op.alter_column('appointments', 'paid_manually',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.drop_index('appointments_professional_id_idx', table_name='appointments')
    op.drop_index('appointments_service_id_idx', table_name='appointments')
    op.create_index(op.f('ix_appointments_appointment_date'), 'appointments', ['appointment_date'], unique=False)
    op.create_index(op.f('ix_appointments_client_id'), 'appointments', ['client_id'], unique=False)
    op.create_index(op.f('ix_appointments_group_id'), 'appointments', ['group_id'], unique=False)
    op.create_index(op.f('ix_appointments_professional_id'), 'appointments', ['professional_id'], unique=False)
    op.create_index(op.f('ix_appointments_service_id'), 'appointments', ['service_id'], unique=False)
    op.create_index(op.f('ix_appointments_start_time'), 'appointments', ['start_time'], unique=False)
    op.create_index(op.f('ix_appointments_status'), 'appointments', ['status'], unique=False)
    op.create_foreign_key(None, 'appointments', 'appointment_groups', ['group_id'], ['id'])
    op.alter_column('labels', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('labels', 'color',
               existing_type=sa.VARCHAR(length=7),
               server_default=None,
               existing_nullable=False)
    op.alter_column('labels', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('labels', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('labels', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.drop_index('uq_labels_name', table_name='labels')
    op.create_index(op.f('ix_labels_name'), 'labels', ['name'], unique=True)
    op.alter_column('professional_availability', 'day_of_week',
               existing_type=postgresql.ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='professional_availability_day_enum'),
               type_=sa.Enum('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='dayofweek'),
               existing_nullable=False)
    op.drop_index('professional_availability_professional_user_id_day_of_week_idx', table_name='professional_availability')
    op.create_index(op.f('ix_professional_availability_professional_user_id'), 'professional_availability', ['professional_user_id'], unique=False)
    op.create_unique_constraint('uq_prof_avail_day_time_slot', 'professional_availability', ['professional_user_id', 'day_of_week', 'start_time', 'end_time'])
    op.create_foreign_key(None, 'professional_availability', 'users', ['professional_user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('professional_blocked_time', 'block_type',
               existing_type=postgresql.ENUM('break', 'vacation', 'sick_leave', 'other', name='professional_blocked_time_block_type_enum'),
               type_=sa.String(length=10),
               existing_nullable=False)
    op.drop_index('professional_blocked_time_professional_user_id_blocked_date_idx', table_name='professional_blocked_time')
    op.create_index(op.f('ix_professional_blocked_time_professional_user_id'), 'professional_blocked_time', ['professional_user_id'], unique=False)
    op.create_unique_constraint('uq_prof_blocked_date_slot_type', 'professional_blocked_time', ['professional_user_id', 'blocked_date', 'start_time', 'end_time', 'block_type'])
    op.create_foreign_key(None, 'professional_blocked_time', 'users', ['professional_user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('professional_breaks', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('professional_breaks', 'day_of_week',
               existing_type=postgresql.ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='professional_availability_day_enum'),
               type_=sa.Enum('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='dayofweek'),
               existing_nullable=False)
    op.create_index(op.f('ix_professional_breaks_professional_user_id'), 'professional_breaks', ['professional_user_id'], unique=False)
    op.create_index(op.f('ix_professional_breaks_tenant_id'), 'professional_breaks', ['tenant_id'], unique=False)
    op.create_unique_constraint('uq_prof_break_day_time_slot', 'professional_breaks', ['professional_user_id', 'day_of_week', 'start_time', 'end_time'])
    op.create_foreign_key(None, 'professional_breaks', 'users', ['professional_user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('service_categories', 'display_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.create_unique_constraint(None, 'service_categories', ['name'])
    op.alter_column('service_image_labels', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('service_image_labels', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.create_index(op.f('ix_service_image_labels_image_id'), 'service_image_labels', ['image_id'], unique=False)
    op.create_index(op.f('ix_service_image_labels_label_id'), 'service_image_labels', ['label_id'], unique=False)
    op.alter_column('service_images', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('service_images', 'display_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('service_images', 'is_primary',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('service_images', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('service_images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.create_index('idx_service_images_created_at', 'service_images', ['created_at'], unique=False)
    op.create_index('idx_service_images_is_primary', 'service_images', ['is_primary'], unique=False)
    op.create_index('idx_service_images_service_id_display_order', 'service_images', ['service_id', 'display_order'], unique=False)
    op.drop_index('service_professionals_association_professional_user_id_idx', table_name='service_professionals_association')
    op.create_unique_constraint('uq_service_professional', 'service_professionals_association', ['service_id', 'professional_user_id'])
    op.create_foreign_key(None, 'service_professionals_association', 'services', ['service_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'service_professionals_association', 'users', ['professional_user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('services', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('services', 'parallelable',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('services', 'max_parallel_pros',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.drop_index('services_category_id_idx', table_name='services')
    op.create_index(op.f('ix_services_category_id'), 'services', ['category_id'], unique=False)
    op.create_foreign_key(None, 'services', 'service_categories', ['category_id'], ['id'])
    op.drop_column('services', 'image_crespo')
    op.drop_column('services', 'image_ondulado')
    op.drop_column('services', 'image_cacheado')
    op.drop_column('services', 'image_liso')
    op.drop_column('services', 'image')
    op.drop_index('idx_user_labels_label_id', table_name='user_labels')
    op.drop_index('idx_user_labels_user_id', table_name='user_labels')
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('CLIENTE', 'PROFISSIONAL', 'ATENDENTE', 'GESTOR', name='users_role_enum'),
               type_=sa.Enum('CLIENTE', 'PROFISSIONAL', 'ATENDENTE', 'GESTOR', name='userrole'),
               existing_nullable=False)
    op.alter_column('users', 'gender',
               existing_type=postgresql.ENUM('MASCULINO', 'FEMININO', 'OUTROS', name='users_gender_enum'),
               type_=sa.Enum('MASCULINO', 'FEMININO', 'OUTROS', name='gender'),
               existing_nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.drop_index('ix_users_address_cep', table_name='users')
    op.drop_index('ix_users_address_city', table_name='users')
    op.drop_index('ix_users_address_state', table_name='users')
    op.drop_index('users_email_idx', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('users_email_idx', 'users', ['email'], unique=False)
    op.create_index('ix_users_address_state', 'users', ['address_state'], unique=False)
    op.create_index('ix_users_address_city', 'users', ['address_city'], unique=False)
    op.create_index('ix_users_address_cep', 'users', ['address_cep'], unique=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('users', 'gender',
               existing_type=sa.Enum('MASCULINO', 'FEMININO', 'OUTROS', name='gender'),
               type_=postgresql.ENUM('MASCULINO', 'FEMININO', 'OUTROS', name='users_gender_enum'),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.Enum('CLIENTE', 'PROFISSIONAL', 'ATENDENTE', 'GESTOR', name='userrole'),
               type_=postgresql.ENUM('CLIENTE', 'PROFISSIONAL', 'ATENDENTE', 'GESTOR', name='users_role_enum'),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.create_index('idx_user_labels_user_id', 'user_labels', ['user_id'], unique=False)
    op.create_index('idx_user_labels_label_id', 'user_labels', ['label_id'], unique=False)
    op.add_column('services', sa.Column('image', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('image_liso', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('image_cacheado', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('image_ondulado', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('image_crespo', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'services', type_='foreignkey')
    op.drop_index(op.f('ix_services_category_id'), table_name='services')
    op.create_index('services_category_id_idx', 'services', ['category_id'], unique=False)
    op.alter_column('services', 'max_parallel_pros',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('services', 'parallelable',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('services', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.drop_constraint(None, 'service_professionals_association', type_='foreignkey')
    op.drop_constraint(None, 'service_professionals_association', type_='foreignkey')
    op.drop_constraint('uq_service_professional', 'service_professionals_association', type_='unique')
    op.create_index('service_professionals_association_professional_user_id_idx', 'service_professionals_association', ['professional_user_id'], unique=False)
    op.drop_index('idx_service_images_service_id_display_order', table_name='service_images')
    op.drop_index('idx_service_images_is_primary', table_name='service_images')
    op.drop_index('idx_service_images_created_at', table_name='service_images')
    op.alter_column('service_images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
    op.alter_column('service_images', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
    op.alter_column('service_images', 'is_primary',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('service_images', 'display_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('service_images', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_index(op.f('ix_service_image_labels_label_id'), table_name='service_image_labels')
    op.drop_index(op.f('ix_service_image_labels_image_id'), table_name='service_image_labels')
    op.alter_column('service_image_labels', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('service_image_labels', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_constraint(None, 'service_categories', type_='unique')
    op.alter_column('service_categories', 'display_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.drop_constraint(None, 'professional_breaks', type_='foreignkey')
    op.drop_constraint('uq_prof_break_day_time_slot', 'professional_breaks', type_='unique')
    op.drop_index(op.f('ix_professional_breaks_tenant_id'), table_name='professional_breaks')
    op.drop_index(op.f('ix_professional_breaks_professional_user_id'), table_name='professional_breaks')
    op.alter_column('professional_breaks', 'day_of_week',
               existing_type=sa.Enum('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='dayofweek'),
               type_=postgresql.ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='professional_availability_day_enum'),
               existing_nullable=False)
    op.alter_column('professional_breaks', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'professional_blocked_time', type_='foreignkey')
    op.drop_constraint('uq_prof_blocked_date_slot_type', 'professional_blocked_time', type_='unique')
    op.drop_index(op.f('ix_professional_blocked_time_professional_user_id'), table_name='professional_blocked_time')
    op.create_index('professional_blocked_time_professional_user_id_blocked_date_idx', 'professional_blocked_time', ['professional_user_id', 'blocked_date'], unique=False)
    op.alter_column('professional_blocked_time', 'block_type',
               existing_type=sa.String(length=10),
               type_=postgresql.ENUM('break', 'vacation', 'sick_leave', 'other', name='professional_blocked_time_block_type_enum'),
               existing_nullable=False)
    op.drop_constraint(None, 'professional_availability', type_='foreignkey')
    op.drop_constraint('uq_prof_avail_day_time_slot', 'professional_availability', type_='unique')
    op.drop_index(op.f('ix_professional_availability_professional_user_id'), table_name='professional_availability')
    op.create_index('professional_availability_professional_user_id_day_of_week_idx', 'professional_availability', ['professional_user_id', 'day_of_week'], unique=False)
    op.alter_column('professional_availability', 'day_of_week',
               existing_type=sa.Enum('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='dayofweek'),
               type_=postgresql.ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', name='professional_availability_day_enum'),
               existing_nullable=False)
    op.drop_index(op.f('ix_labels_name'), table_name='labels')
    op.create_index('uq_labels_name', 'labels', ['name'], unique=False)
    op.alter_column('labels', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
    op.alter_column('labels', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
    op.alter_column('labels', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('labels', 'color',
               existing_type=sa.VARCHAR(length=7),
               server_default=sa.text("'#00BFFF'::character varying"),
               existing_nullable=False)
    op.alter_column('labels', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_index(op.f('ix_appointments_status'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_start_time'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_service_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_professional_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_group_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_client_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_appointment_date'), table_name='appointments')
    op.create_index('appointments_service_id_idx', 'appointments', ['service_id'], unique=False)
    op.create_index('appointments_professional_id_idx', 'appointments', ['professional_id'], unique=False)
    op.alter_column('appointments', 'paid_manually',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('appointments', 'status',
               existing_type=sa.Enum('SCHEDULED', 'CONFIRMED', 'WALK_IN', 'ARRIVED', 'IN_SERVICE', 'READY_TO_PAY', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='appointmentstatus'),
               server_default=sa.text("'SCHEDULED'::appointments_status_enum"),
               type_=postgresql.ENUM('SCHEDULED', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'WALK_IN', 'READY_TO_PAY', 'IN_SERVICE', 'ARRIVED', name='appointments_status_enum'),
               existing_nullable=True)
    op.alter_column('appointments', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.drop_constraint(None, 'appointment_groups', type_='foreignkey')
    op.drop_index(op.f('ix_appointment_groups_status'), table_name='appointment_groups')
    op.drop_index(op.f('ix_appointment_groups_start_time'), table_name='appointment_groups')
    op.drop_index(op.f('ix_appointment_groups_client_id'), table_name='appointment_groups')
    op.create_index('appointment_groups_status_idx', 'appointment_groups', ['status'], unique=False)
    op.create_index('appointment_groups_start_time_idx', 'appointment_groups', ['start_time'], unique=False)
    op.create_index('appointment_groups_client_id_idx', 'appointment_groups', ['client_id'], unique=False)
    op.alter_column('appointment_groups', 'status',
               existing_type=sa.Enum('SCHEDULED', 'CONFIRMED', 'WALK_IN', 'ARRIVED', 'IN_SERVICE', 'READY_TO_PAY', 'COMPLETED', 'CANCELLED', 'PARTIALLY_COMPLETED', name='appointmentgroupstatus'),
               type_=postgresql.ENUM('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'WALK_IN', 'PARTIALLY_COMPLETED', 'READY_TO_PAY', 'IN_SERVICE', 'CONFIRMED', 'ARRIVED', name='appointment_groups_status_enum'),
               existing_nullable=False)
    # ### end Alembic commands ###
