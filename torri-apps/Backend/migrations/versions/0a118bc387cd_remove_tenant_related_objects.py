"""remove_tenant_related_objects

Revision ID: 0a118bc387cd
Revises: 36becb0facb0
Create Date: 2025-06-08 00:55:53.060767

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0a118bc387cd'
down_revision: Union[str, None] = '36becb0facb0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'tenant_id')
    op.drop_column('appointments', 'tenant_id')
    op.drop_column('professional_availability', 'tenant_id')
    op.drop_column('professional_breaks', 'tenant_id')
    op.drop_column('professional_blocked_time', 'tenant_id')
    op.drop_column('service_categories', 'tenant_id')
    op.drop_column('services', 'tenant_id')
    op.drop_table('tenants')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('id', sa.CHAR(length=36), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('company_info', sa.TEXT(), nullable=True),
    sa.Column('address', sa.VARCHAR(length=255), nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), nullable=True),
    sa.Column('state_province', sa.VARCHAR(length=100), nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), nullable=True),
    sa.Column('phone_number', sa.VARCHAR(length=20), nullable=True),
    sa.Column('email', sa.VARCHAR(length=120), nullable=True),
    sa.Column('website', sa.VARCHAR(length=255), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_tenants_email'),
    sa.UniqueConstraint('name', name='uq_tenants_name')
    )
    op.add_column('services', sa.Column('tenant_id', sa.CHAR(length=36), nullable=True))
    # Recreate foreign key if it existed, though it was nullable so maybe not critical for all.
    # op.create_foreign_key('fk_services_tenant_id', 'services', 'tenants', ['tenant_id'], ['id'])
    op.add_column('service_categories', sa.Column('tenant_id', sa.CHAR(length=36), nullable=True))
    # op.create_foreign_key('fk_service_categories_tenant_id', 'service_categories', 'tenants', ['tenant_id'], ['id'])
    op.add_column('professional_blocked_time', sa.Column('tenant_id', sa.CHAR(length=36), nullable=False))
    # op.create_foreign_key('fk_professional_blocked_time_tenant_id', 'professional_blocked_time', 'tenants', ['tenant_id'], ['id'])
    op.add_column('professional_breaks', sa.Column('tenant_id', sa.CHAR(length=36), nullable=False))
    # op.create_foreign_key('fk_professional_breaks_tenant_id', 'professional_breaks', 'tenants', ['tenant_id'], ['id'])
    op.add_column('professional_availability', sa.Column('tenant_id', sa.CHAR(length=36), nullable=False))
    # op.create_foreign_key('fk_professional_availability_tenant_id', 'professional_availability', 'tenants', ['tenant_id'], ['id'])
    op.add_column('appointments', sa.Column('tenant_id', sa.CHAR(length=36), nullable=False))
    # op.create_foreign_key('fk_appointments_tenant_id', 'appointments', 'tenants', ['tenant_id'], ['id'])
    op.add_column('users', sa.Column('tenant_id', sa.CHAR(length=36), nullable=True))
    # op.create_foreign_key('fk_users_tenant_id', 'users', 'tenants', ['tenant_id'], ['id'])
    # ### end Alembic commands ###
