"""add_phone_number_to_users_table

Revision ID: 6342218c59f9
Revises: 33d4b8504772
Create Date: 2025-06-11 17:31:30.576645

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql # Import mysql dialect if needed for specific types like CHAR

# revision identifiers, used by Alembic.
revision: str = '6342218c59f9'
down_revision: Union[str, None] = '33d4b8504772'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the column already exists to make the migration idempotent.
    # This is a common practice, though Alembic's autogenerate might handle it.
    # For this subtask, we'll assume a simple add_column.
    # If the column truly pre-exists AND was part of an earlier, unrecorded model change,
    # Alembic might not detect it as new. If it was added AND a migration run, this should be a no-op.
    try:
        op.add_column('users', sa.Column('phone_number', sa.String(length=20), nullable=True))
    except Exception as e:
        print(f"Skipping add_column for phone_number, it might already exist or another issue: {e}")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.drop_column('users', 'phone_number')
    except Exception as e:
        print(f"Skipping drop_column for phone_number, it might not exist or another issue: {e}")
    # ### end Alembic commands ###
